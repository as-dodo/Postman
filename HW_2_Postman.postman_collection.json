{
	"info": {
		"_postman_id": "16d4f400-e88b-4bf9-8986-47200c127183",
		"name": "HW_2_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21369719"
	},
	"item": [
		{
			"name": "Ep_1_First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*http://162.55.220.72:5005/first",
							"1. Отправить запрос.",
							"2. Статус код 200",
							"3. Проверить, что в body приходит правильный string.",
							"*/",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "Ep_2_User_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//http://162.55.220.72:5005/user_info_3",
							"//1. Отправить запрос.",
							"// const postRequest = {",
							"//   url: 'http://162.55.220.72:5005/user_info_3/',",
							"//   method: 'POST',",
							"//   header: {",
							"//     'Content-Type': 'multipart/form-data'",
							"//   },",
							"//   body: {",
							"//     mode: 'formdata',",
							"//     formdata: [",
							"//         {key: \"name\", value: \"Leo\", disabled: false, description: {content:\"\", type:\"text/plain\"}},",
							"//         {key: \"age\", value: \"33\", disabled: false, description: {content:\"\", type:\"text/plain\"}},",
							"//         {key: \"salary\", value: \"1500\", disabled: false, description: {content:\"\", type:\"text/plain\"}}",
							"//     ]",
							"//   }",
							"// };",
							"",
							"// pm.sendRequest(postRequest, function (error, response) {",
							"//     console.log(error ? error : response.json());",
							"// });",
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//3. Спарсить response body в json.",
							"const user_info_3 = pm.response.json();",
							"// 4. Проверить, что name в ответе равно name в request (name вбить руками.)",
							"pm.test(\"Person is Leo\", function () {",
							"    pm.expect(user_info_3.name).to.eql('Leo');",
							"});",
							"//5. Проверить, что age в ответе равно age в request (age вбить руками.)",
							"pm.test(\"Person is 33 y.o.\", function () {",
							"    pm.expect(user_info_3.age).to.eql('33');",
							"});",
							"//6. Проверить, что salary в ответе равно salary в request (salary вбить руками.)",
							"pm.test(\"Salary is 1500 $\", function () {",
							"    pm.expect(user_info_3.salary).to.eql(1500);",
							"});",
							"//7. Спарсить request.",
							"const req = request.data;",
							"// 8. Проверить, что name в ответе равно name в request (name забрать из request.)",
							"pm.test(\"Is name the same\", function () {",
							"   pm.expect(user_info_3.name).to.eql(req.name);",
							" });",
							"// 9. Проверить, что age в ответе равно age в request (age забрать из request.)",
							"pm.test(\"Is age the same\", function () {",
							"   pm.expect(user_info_3.age).to.eql(req.age);",
							" });",
							"// 10. Проверить, что salary в ответе равно salary в request (salary забрать из request.)",
							"pm.test(\"Is salary the same\", function () {",
							"   pm.expect(user_info_3.salary).to.eql(Number(req.salary));",
							" });",
							"// 11. Вывести в консоль параметр family из response.",
							"console.log(user_info_3.family);",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"const reqSalary1_5 = req.salary * 4;",
							"pm.test(\"Is 1,5 year salary the same\", function () {",
							"   pm.expect(user_info_3.family.u_salary_1_5_year).to.eql(reqSalary1_5);",
							" });"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Leo",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Ep_3_Object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 3. Спарсить response body в json.",
							"const respPersonInfo = pm.response.json();",
							"// 4. Спарсить request.",
							"const reqPersonInfo = pm.request.url.query.toObject();",
							"// 5. Проверить, что name в ответе равно name в request (name забрать из request.)",
							"pm.test(\"Is response name  eql request name?\", function () {",
							"    pm.expect(respPersonInfo.name).to.eql(reqPersonInfo.name);",
							"});",
							"// 6. Проверить, что age в ответе равно age в request (age забрать из request.)",
							"pm.test(\"Is response age eql request age?\", function () {",
							"    pm.expect(respPersonInfo.age).to.eql(reqPersonInfo.age);",
							"});",
							"// 7. Проверить, что salary в ответе равно salary в request (salary забрать из request.)",
							"pm.test(\"Is response salary  eql request salary?\", function () {",
							"    pm.expect(respPersonInfo.salary).to.eql(Number(reqPersonInfo.salary));",
							"});",
							"// 8. Вывести в консоль параметр family из response.",
							"console.log(respPersonInfo.family);",
							"// 9. Проверить, что у параметра dog есть параметры name.",
							"let dog = respPersonInfo.family.pets.dog;",
							"pm.test(\"Does dog have a name?\", function () {",
							"    pm.expect(JSON.stringify(dog)).to.include(\"name\");",
							"});",
							"// 10. Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"Does dog have an age?\", function () {",
							"    pm.expect(JSON.stringify(dog)).to.include(\"age\");",
							"});",
							"// 11. Проверить, что параметр name имеет значение Luky.",
							"pm.test(\"Is dog's name Luky?\", function () {",
							"    pm.expect(dog.name).to.eql('Luky');",
							"});",
							"// 12. Проверить, что параметр age имеет значение 4.",
							"pm.test(\"Is dog's age Luky?\", function () {",
							"    pm.expect(dog.age).to.eql(4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Felix&age=55&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Felix"
						},
						{
							"key": "age",
							"value": "55"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Ep_4_Object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 3. Спарсить response body в json.",
							"const respPersonInfo = pm.response.json();",
							"// 4. Спарсить request.",
							"const reqPersonInfo = pm.request.url.query.toObject();",
							"// 5. Проверить, что name в ответе равно name в request (name забрать из request.)",
							"pm.test(\"Is response name eql request name\", function () {",
							"    pm.expect(respPersonInfo.name).to.eql(reqPersonInfo.name);",
							"});",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"pm.test(\"Is response age eql request age\", function () {",
							"    pm.expect(respPersonInfo.age).to.eql(Number(reqPersonInfo.age));",
							"});",
							"// 7. Вывести в консоль параметр salary из request.",
							"console.log('salary from request --- ', reqPersonInfo.salary);",
							"// 8. Вывести в консоль параметр salary из response.",
							"console.log('salary from response --- ', respPersonInfo.salary);",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.",
							"console.log('salary # 0 from response --- ', respPersonInfo.salary[0]);",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"console.log('salary # 1 from response --- ', respPersonInfo.salary[1]);",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"console.log('salary # 2 from response --- ', respPersonInfo.salary[2]);",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"const reqSalary = Number(reqPersonInfo.salary);",
							"pm.test(\"Response salary[0] eql request salary\", function () {",
							"    pm.expect(respPersonInfo.salary[0]).to.eql(reqSalary);",
							"});",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"Response salary[1] eql request salary*2\", function () {",
							"    pm.expect(respPersonInfo.salary[1]).to.eql(String(reqSalary * 2));",
							"});",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test(\"Response salary[2] eql request salary*3\", function () {",
							"    pm.expect(respPersonInfo.salary[2]).to.eql(String(reqSalary * 3));",
							"});",
							"// 15. Создать в окружении переменную name",
							"// 16. Создать в окружении переменную age",
							"// 17. Создать в окружении переменную salary",
							"// 18. Передать в окружение переменную name",
							"// 19. Передать в окружение переменную age",
							"// 20. Передать в окружение переменную salary",
							"pm.environment.set(\"name\", \"Kleo\");",
							"pm.environment.set(\"age\", \"17\");",
							"pm.environment.set(\"salary\", \"1000\");",
							"// 21. Написать цикл, который выведет в консоль по порядку элементы списка из параметра salary.",
							"const respSalary = respPersonInfo.salary",
							"respSalary.forEach((salary) => {",
							"    console.log(salary);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Kleo&age=17&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Kleo"
						},
						{
							"key": "age",
							"value": "17"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Ep_5_User_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request",
							"// 2. Вставить параметр age из окружения в age",
							"// 3. Вставить параметр name из окружения в name",
							"// 4. Отправить запрос.",
							"// 5. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 6. Спарсить response body в json.",
							"const respUserInfo = pm.response.json();",
							"// 7. Спарсить request.",
							"const reqUserInfo = {",
							"     \"salary\": pm.variables.get(\"salary\"),",
							"     \"age\": pm.variables.get(\"age\"),",
							"     \"name\": pm.variables.get(\"name\"),",
							"}",
							"// 8. Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"User info has 'start_qa_salary' parameter\", function () {",
							"    pm.expect(JSON.stringify(respUserInfo)).to.include(\"start_qa_salary\");",
							"});",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"User info has 'qa_salary_after_6_months' parameter\", function () {",
							"    pm.expect(JSON.stringify(respUserInfo)).to.include(\"qa_salary_after_6_months\");",
							"});",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"User info has 'qa_salary_after_12_months' parameter\", function () {",
							"    pm.expect(JSON.stringify(respUserInfo)).to.include(\"qa_salary_after_12_months\");",
							"});",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"User info has 'qa_salary_after_1.5_year' parameter\", function () {",
							"    pm.expect(JSON.stringify(respUserInfo)).to.include(\"qa_salary_after_1.5_year\");",
							"});",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"User info has 'qa_salary_after_3.5_years' parameter\", function () {",
							"    pm.expect(JSON.stringify(respUserInfo)).to.include(\"qa_salary_after_3.5_years\");",
							"});",
							"// 13. Проверить, что json response имеет параметр person",
							"pm.test(\"User info has 'person' parameter\", function () {",
							"    pm.expect(JSON.stringify(respUserInfo)).to.include(\"person\");",
							"});",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"const reqSalary = Number(reqUserInfo.salary)",
							"pm.test(\"Is start_qa_salary eql request salary\", function () {",
							"    pm.expect(respUserInfo.start_qa_salary).to.eql(reqSalary);",
							"});",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"Is qa_salary_after_6_months eql request salary*2\", function () {",
							"    pm.expect(respUserInfo.qa_salary_after_6_months).to.eql(reqSalary * 2);",
							"});",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test(\"Is qa_salary_after_12_months eql request salary*2.7\", function () {",
							"    pm.expect(respUserInfo.qa_salary_after_12_months).to.eql(reqSalary * 2.7);",
							"});",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test(\"Is qa_salary_after_1.5_year eql request salary*3.3\", function () {",
							"    pm.expect(respUserInfo['qa_salary_after_1.5_year']).to.eql(reqSalary * 3.3);",
							"});",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test(\"Is qa_salary_after_3.5_years eql request salary*3.8\", function () {",
							"    pm.expect(respUserInfo['qa_salary_after_3.5_years']).to.eql(reqSalary * 3.8);",
							"});",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.test(\"Is person u_name salary from response eql request salary\", function () {",
							"    pm.expect(respUserInfo.person.u_name[1]).to.eql(reqSalary);",
							"});",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"pm.test(\"Is person u_age from response eql request age\", function () {",
							"    pm.expect(respUserInfo.person.u_age).to.eql(Number(reqUserInfo.age));",
							"});",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test(\"Is u_salary_5_years from response eql salary*4.2\", function () {",
							"    pm.expect(respUserInfo.person.u_salary_5_years).to.eql(Number(reqSalary * 4.2));",
							"});",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"let respPerson = respUserInfo.person;",
							"for (let key in respPerson) {",
							"    console.log(key, respPerson[key])",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}